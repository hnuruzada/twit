{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as tweetApi from \"../../api/requests/tweet\";\nexport const getAllTweets = createAsyncThunk(\"tweet/getAllTweets\", async page => {\n  try {\n    const response = await tweetApi.getAllTweets(page);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const getFollowingTweets = createAsyncThunk(\"tweet/getFollowingTweets\", async page => {\n  try {\n    const response = await tweetApi.getFollowingTweets(page);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const getTweetById = createAsyncThunk(\"tweet/getTweetById\", async tweetId => {\n  try {\n    const response = await tweetApi.getTweetById(tweetId);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const likeTweet = createAsyncThunk(\"tweet/likeTweet\", async tweetId => {\n  try {\n    const response = await tweetApi.likeTweet(tweetId);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const unlikeTweet = createAsyncThunk(\"tweet/unlikeTweet\", async tweetId => {\n  try {\n    const response = await tweetApi.unlikeTweet(tweetId);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const newTweet = createAsyncThunk(\"tweet/newTweet\", async formData => {\n  try {\n    const response = await tweetApi.newTweet(formData);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const newReply = createAsyncThunk(\"tweet/newReply\", async _ref => {\n  let {\n    data,\n    id\n  } = _ref;\n  try {\n    const response = await tweetApi.newReply(data, id);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const newRetweet = createAsyncThunk(\"tweet/newRetweet\", async id => {\n  try {\n    const response = await tweetApi.retweet(id);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const editTweet = createAsyncThunk(\"tweet/editTweet\", async _ref2 => {\n  let {\n    data,\n    id\n  } = _ref2;\n  try {\n    const response = await tweetApi.editTweet(data, id);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const deleteTweet = createAsyncThunk(\"tweet/deleteTweet\", async id => {\n  try {\n    const response = await tweetApi.deleteTweet(id);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});","map":{"version":3,"names":["createAsyncThunk","tweetApi","getAllTweets","page","response","error","getFollowingTweets","getTweetById","tweetId","likeTweet","unlikeTweet","newTweet","formData","newReply","_ref","data","id","newRetweet","retweet","editTweet","_ref2","deleteTweet"],"sources":["C:/Users/Hesen/Desktop/twitter-clone/client/src/redux/actions/tweetActions.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport * as tweetApi from \"../../api/requests/tweet\";\r\n\r\nexport const getAllTweets = createAsyncThunk(\r\n  \"tweet/getAllTweets\",\r\n  async (page) => {\r\n    try {\r\n      const response = await tweetApi.getAllTweets(page);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getFollowingTweets = createAsyncThunk(\r\n  \"tweet/getFollowingTweets\",\r\n  async (page) => {\r\n    try {\r\n      const response = await tweetApi.getFollowingTweets(page);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getTweetById = createAsyncThunk(\r\n  \"tweet/getTweetById\",\r\n  async (tweetId) => {\r\n    try {\r\n      const response = await tweetApi.getTweetById(tweetId);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const likeTweet = createAsyncThunk(\r\n  \"tweet/likeTweet\",\r\n  async (tweetId) => {\r\n    try {\r\n      const response = await tweetApi.likeTweet(tweetId);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const unlikeTweet = createAsyncThunk(\r\n  \"tweet/unlikeTweet\",\r\n  async (tweetId) => {\r\n    try {\r\n      const response = await tweetApi.unlikeTweet(tweetId);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const newTweet = createAsyncThunk(\"tweet/newTweet\", async (formData) => {\r\n  try {\r\n    const response = await tweetApi.newTweet(formData);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n});\r\n\r\nexport const newReply = createAsyncThunk(\r\n  \"tweet/newReply\",\r\n  async ({ data, id }) => {\r\n    try {\r\n      const response = await tweetApi.newReply(data, id);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const newRetweet = createAsyncThunk(\"tweet/newRetweet\", async (id) => {\r\n  try {\r\n    const response = await tweetApi.retweet(id);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n});\r\n\r\nexport const editTweet = createAsyncThunk(\r\n  \"tweet/editTweet\",\r\n  async ({ data, id }) => {\r\n    try {\r\n      const response = await tweetApi.editTweet(data, id);\r\n      return response;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteTweet = createAsyncThunk(\"tweet/deleteTweet\", async (id) => {\r\n  try {\r\n    const response = await tweetApi.deleteTweet(id);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}